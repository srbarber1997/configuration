group 'com.github.srbarber1997'
version '1.0.0'

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.8
targetCompatibility = 1.8

jar {
    baseName = 'configuration'
    version = this.version
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.reflections:reflections:0.9.11'
    compile 'com.google.code.gson:gson:2.3.1'
    compile 'com.google.guava:guava:23.0'
    compile 'org.slf4j:slf4j-api:1.7.24'
//    testCompile 'org.springframework.boot:spring-boot-starter:+'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    if (signingKey && signingPassword) {
        project.logger.info("Using in-memory PGP Keys")

        // https://docs.gradle.org/current/userguide/signing_plugin.html
        useInMemoryPgpKeys(signingKey, signingPassword)
    } else {
        project.logger.info("Using keyring found at: " + findProperty("signing.secretKeyRingFile"))
    }
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: findProperty("ossrhUsername"), password: findProperty("ossrhPassword"))
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: findProperty("ossrhUsername"), password: findProperty("ossrhPassword"))
            }

            pom.project {
                name 'configuration'
                packaging 'jar'
                artifactId 'configuration'
                description 'A configuration library for Java applications.'
                url 'https://github.com/srbarber1997/configuration'

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'srbarber1997'
                        name 'Simon Barber'
                        email 'srbarber1997@gmail.com'
                    }
                }
            }
        }
    }
}
